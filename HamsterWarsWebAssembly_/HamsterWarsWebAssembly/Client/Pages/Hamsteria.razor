@page "/hamster"
@inject IHamsterService _hamster
@inject NavigationManager _nav
@inject HttpClient _http


<PageTitle>Add hamster</PageTitle>

<h3>Add a new hamster</h3>

<EditForm Model="@hamster" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="hamster.Name" class="form-control"></InputText>
        <ValidationMessage For="@(()=> hamster.Name)" />
    </div>
    <div>
        <label for="age">Age</label>
        <InputNumber id="age" @bind-Value="hamster.Age" class="form-control"></InputNumber>
        <ValidationMessage For="@(()=> hamster.Age)" />
    </div>
    <div>
        <label for="fav-food">Favourite food</label>
        <InputText id="fav-food" @bind-Value="hamster.FavFood" class="form-control"></InputText>
        <ValidationMessage For="@(()=> hamster.FavFood)" />
    </div>
    <div>
        <label for="fav-thing">Favourite thing</label>
        <InputText id="fav-thing" @bind-Value="hamster.FavThing" class="form-control"></InputText>
        <ValidationMessage For="@(()=> hamster.FavThing)" />
    </div>
    <br />
    <div>
        <label for="image">Image</label>
          <InputFile OnChange="@LoadFile" @bind-Value="hamster.ImgName" accept=".png,.jpg,.jpeg"></InputFile> 
    </div>
    
    <br />
    <p style="color: firebrick; font-size: 1.3rem;">@errorMessage</p>
    <button type="submit" class="btn btn-primary">Save hamster</button>
    
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    Hamster hamster = new Hamster();

    private long maxFileSize = 1024 * 500;
    IBrowserFile selectedFile;
    private string? fileName;
    private string? dbFileName;
    private string errorMessage = string.Empty;

    private void LoadFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        fileName = e.File.Name;
        dbFileName = string.Format(@"{0}.jpg", Guid.NewGuid());
        string dbPath = $"/images/{dbFileName}";
        hamster.ImgName = dbPath;

    }

    bool CheckValidTypes()
    {
        string[] vaildTypes = { "png", "jpg", "jpeg" };
        string fileExtension = fileName.Split('.').Last();
        return vaildTypes.Contains(fileExtension.ToLower());
        
    }

    private async void SaveFile()
    {
        using (var ms = new MemoryStream())
        {
            await selectedFile.OpenReadStream().CopyToAsync(ms);
            var uploadedFile = new UploadedFile();
         
            uploadedFile.FileName = dbFileName;
            uploadedFile.FileContent = ms.ToArray();
           
            await _http.PostAsJsonAsync<UploadedFile>("api/fileupload", uploadedFile);
        }
      
    }


    async Task HandleSubmit()
    {
        if (fileName == null)
        {
            errorMessage = "Please select a file.";
            return;
        }

        bool isValid = CheckValidTypes();
   
        if (!isValid)
        {
            errorMessage = "The file type is not allowed.";
            return;
        }

        if (selectedFile.Size > maxFileSize)
        {
            errorMessage = "The file is too large.";
            return;
        }


        SaveFile();
        await _hamster.AddHamster(hamster);
        
        _nav.NavigateTo("gallery");
    }

}
