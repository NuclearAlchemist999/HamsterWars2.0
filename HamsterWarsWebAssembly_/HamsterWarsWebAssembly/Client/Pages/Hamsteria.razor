@page "/hamster"
@page "/hamster/{id:int}"
@inject IHamsterService _hamster
@inject NavigationManager _nav

@if (Id == null)
{
    <h3>Add hamster</h3>
}
else
{
    <h3>Edit @hamster.Name</h3>
}

<EditForm Model = "hamster" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="hamster.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="age">Age</label>
        <InputNumber id="age" @bind-Value="hamster.Age" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="favfood">Favourite food</label>
        <InputText id="favfood" @bind-Value="hamster.FavFood" class="form-control"></InputText>
    </div>
    <div>
        <label for="favthing">Favourite thing</label>
        <InputText id="favthing" @bind-Value="hamster.FavThing" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteHamster">Delete hamster</button>


</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    Hamster hamster = new Hamster();

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save hamster" : "Update hamster";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            hamster = await _hamster.GetHamster((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await _hamster.AddHamster(hamster);
        }
        else
        {
            await _hamster.UpdateHamster(hamster);
            
        }
        _nav.NavigateTo("gallery");
    }

    async Task DeleteHamster()
    {
        await _hamster.DeleteHamster(hamster.Id);
        _nav.NavigateTo("gallery");
    }

}
